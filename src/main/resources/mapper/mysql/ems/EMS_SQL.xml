<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="empc"> 
	<insert id="emsInsertData" parameterType="SerialDTO">
		INSERT INTO EMS
		(	SystemV,
			SystemC,
			SOC,
			SOH,
			Voltage1,
			Voltage2,
			Voltage3,
			Voltage4,
			Voltage5,
			Voltage6,
			Voltage7,
			Voltage8,
			Voltage9,
			Voltage10,
			Voltage11,
			Voltage12,
			Voltage13,
			Voltage14,
			Temp1,
			Temp2,
			Temp3,
			Temp4,
			Temp5,
			Temp6,
			Temp7,
			Temp8,
			Temp9,
			Aram1,
			Aram2,
			time,
			onoff
		)VALUES(
			#{SystemV},
			#{SystemC},
			#{SOH},
			#{SOC},
			#{Voltage1},
			#{Voltage2},
			#{Voltage3},
			#{Voltage4},
			#{Voltage5},
			#{Voltage6},
			#{Voltage7},
			#{Voltage8},
			#{Voltage9},
			#{Voltage10},
			#{Voltage11},
			#{Voltage12},
			#{Voltage13},
			#{Voltage14},
			#{Temp1},
			#{Temp2},
			#{Temp3},
			#{Temp4},
			#{Temp5},
			#{Temp6},
			#{Temp7},
			#{Temp8},
			#{Temp9},
			#{Aram1},
			#{Aram2},
			#{time},
			#{onoff}
		)
	</insert>
	
	
	<insert id="pcsInsertData" parameterType="SerialDTO">
		INSERT INTO PCS
		(	
			InputVoltageR,
			BatteryVoltage,
			OutputVoltageR,
			OutputActivePowerR,
			OutputFrequency,
			ComponentMaxTemp,
			BatteryCapacity,
			BatteryCurrent,
			SolarInputVoltage1,
			OutputApparentPowerR,
			InputFrequency,
			InnerTemp,
			WorkingStatus,
			BatteryPower,
			PcsControl,
			SupplyToLoad,
			WorkingMode,
			FaultCodeIdStoredInFlash,
			CommandForFaultRecovery,
			StartTimeforEnableWorking,
			EndTimeforEnableWorking,
			StartTime2forEnableWorking,
			EndTime2forEnableWorking,
			StartTimeforAcLoad,
			EndTimeforAcLoad
		)VALUES(
			#{InputVoltageR},
			#{BatteryVoltage},
			#{OutputVoltageR},
			#{OutputActivePowerR},
			#{OutputFrequency},
			#{ComponentMaxTemp},
			#{BatteryCapacity},
			#{BatteryCurrent},
			#{SolarInputVoltage1},
			#{OutputApparentPowerR},
			#{InputFrequency},
			#{InnerTemp},
			#{WorkingStatus},
			#{BatteryPower},
			#{PcsControl},
			#{SupplyToLoad},
			#{WorkingMode},
			#{FaultCodeIdStoredInFlash},
			#{CommandForFaultRecovery},
			#{StartTimeforEnableWorking},
			#{EndTimeforEnableWorking},
			#{StartTime2forEnableWorking},
			#{EndTime2forEnableWorking},
			#{StartTimeforAcLoad},
			#{EndTimeforAcLoad}
		)
	</insert>
	
	<select id="EMS_getData" resultType="SerialDTO">
		SELECT * FROM EMS order by time DESC limit 1
	</select>
	
	<select id="PCS_getData" resultType="SerialDTO">
		SELECT * FROM PCS order by PCS_KEYNO DESC limit 1
	</select>
	
	<!-- 오늘꺼 데이터 최대값, 시간, 나머지 -->
	<select id="ONE_getData" resultType="SerialDTO" parameterType="HashMap">
		SELECT A.*, max(CAST(IO_POWER AS signed integer )) as maxPower , (SELECT TIMESTAMPDIFF(HOUR,(SELECT IO_DATE FROM INVERTER WHERE DATE_FORMAT(IO_DATE, "%Y-%m-%d") = CURDATE() AND IO_TYPE = 'one' LIMIT 1),(SELECT IO_DATE FROM INVERTER WHERE DATE_FORMAT(IO_DATE, "%Y-%m-%d") = CURDATE() AND IO_TYPE = 'one'  ORDER BY IO_KEYNO DESC LIMIT 1))) as powerTime
		FROM(
			SELECT * 
			FROM INVERTER 
			WHERE DATE_FORMAT(IO_DATE, "%Y-%m-%d") = CURDATE()
			<if test='!inverter.equals("all")'>
				AND IO_TYPE = #{inverter} 
			</if>
			ORDER BY IO_KEYNO DESC
			LIMIT 1111
		)A
	</select>

	<!-- <select id="ONE_getList_Preday" resultType="SerialDTO">
		SELECT * FROM INVERTER WHERE IO_DATE = CURDATE() - INTERVAL 1 DAY
	</select> -->
	<!-- 오늘꺼 데이터 합계 -->
	<select id="ONE_sum_Today" resultType="SerialDTO" parameterType="HashMap">
		SELECT ROUND((sum(IO_POWER)/1000),3) as powers, round(AVG(IO_POWER/1000),3) as average , ROUND(sum(IO_USAGE),3) as usages, round(AVG(IO_USAGE),3) as  usaverage , round(AVG(IO_CHARGE),3) as charges , round((100 - AVG(IO_CHARGE)),3) as discharges, max(IO_CO2) as co2es 
		FROM(  SELECT *
				FROM INVERTER 
				WHERE DATE_FORMAT(IO_DATE, "%Y-%m-%d") = CURDATE()
				<if test='!inverter.equals("all")'>
					AND IO_TYPE = #{inverter} 
				</if>
			)A
	</select>
	<!-- 어제꺼 데이터 합계 -->
	<select id="ONE_sum_Preday" resultType="SerialDTO" parameterType="HashMap">
		SELECT ROUND((sum(IO_POWER)/1000),3) as powers, round(AVG(IO_POWER),1) as average , ROUND(sum(IO_USAGE),3) as usages, TRUNCATE(AVG(IO_CHARGE),1) as charges , TRUNCATE((100 - AVG(IO_CHARGE)),1) as discharges
		FROM(
		SELECT  *
		FROM INVERTER 
		WHERE DATE_FORMAT(IO_DATE, "%Y-%m-%d") = CURDATE() - INTERVAL 1 DAY
		<if test='!inverter.equals("all")'>
			AND IO_TYPE = #{inverter} 
		</if> 
		)A
	</select>
	
	<!-- 이번달 날짜별 데이터 출력 일별, 주별 -->
	<select id="ONE_sum_M" resultType="SerialDTO" parameterType="HashMap">
	<if test='type.equals("week")'>
	SELECT ROUND((sum(powers1)/1000),3) as powers ,ROUND(sum(usages1),3) as usages,K.IO_DATE,ROUND(AVG(charges1),1) as charges, SUM(cashes1) AS cashes, SUM(co2es1) AS co2es
	FROM(
	</if>
		<if test='type.equals("week")'>
		SELECT sum(IO_POWER) as powers1, ROUND(sum(IO_USAGE),3) as usages1, IO_DATE 
		, MAX(IO_CHARGE) as charges1
		, MAX(IO_CASH) as cashes1
		, MAX(IO_CO2) as co2es1 
		</if>
		<if test='type.equals("day")|| type == null'>
		SELECT ROUND((sum(IO_POWER)/1000),3) as powers, ROUND(sum(IO_USAGE),3) as usages, IO_DATE , ROUND(AVG(IO_CHARGE),1) as charges
		, MAX(IO_CASH) as cashes
		, MAX(IO_CO2) as co2es1
		</if>
		,IFNULL((select ROUND(sum(IO_POWER)/1000,3) as powers FROM INVERTER WHERE DATE_FORMAT(IO_DATE, "%Y-%m-%d") = DATE_FORMAT(A.IO_DATE, "%Y-%m-%d") - INTERVAL 1 DAY) ,0 )as prepowers,
		IFNULL((select ROUND(sum(IO_USAGE),3) as usages FROM INVERTER WHERE DATE_FORMAT(IO_DATE, "%Y-%m-%d") = DATE_FORMAT(A.IO_DATE, "%Y-%m-%d") - INTERVAL 1 DAY) ,0 )as preusages
		<if test='type.equals("week")'>
			, week(IO_DATE)+1 as week_num
		</if>
		FROM INVERTER A
		WHERE 1=1 
		<if test='type.equals("day") || type == null'>
			AND DATE_FORMAT(IO_DATE, "%Y-%m") = DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 0 MONTH),"%Y-%m")
		</if>
		<if test='type.equals("week")'>
			AND DATE_FORMAT(IO_DATE, "%Y") = DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 0 MONTH),"%Y")
		</if>
		<if test='!inverter.equals("all")'>
			AND IO_TYPE = #{inverter} 
		</if>  
		GROUP BY DATE_FORMAT(IO_DATE, "%Y-%m-%d")
	<if test='type.equals("week")'>
		)K 
		GROUP BY WEEK_NUM
	</if>
	</select>
	
	<!--달별 , 년별  -->
	<select id="ONE_sum_Y" resultType="SerialDTO" parameterType="HashMap">
		SELECT ROUND((sum(powers1)/1000),3) as powers , ROUND(sum(usages1),3) as usages, ROUND(AVG(charges1),1) as charges , K.days , sum(cashes1) as cashes , sum(co2es1) as co2es
		FROM(
		SELECT ROUND(sum(IO_POWER),3) as powers1, ROUND(sum(IO_USAGE),3) as usages1, IO_DATE , MAX(IO_CHARGE) as charges1, MAX(IO_CASH) as cashes1 ,MAX(IO_CO2) as co2es1
		<if test='type.equals("month")'>
		,DATE_FORMAT(IO_DATE, "%m") as days
		</if>
		<if test='type.equals("year")'>
		,DATE_FORMAT(IO_DATE, "%Y") as days
		</if>
		FROM INVERTER
		WHERE 1=1
		<if test='!inverter.equals("all")'>
			AND IO_TYPE = #{inverter} 
		</if>
		GROUP BY DATE_FORMAT(IO_DATE, "%Y-%m-%d")
		)K
		<if test='type.equals("month")'>
			group by DATE_FORMAT(K.IO_DATE, "%Y-%m")
		</if>
		<if test='type.equals("year")'>
			group by DATE_FORMAT(K.IO_DATE, "%Y")
		</if>
	</select>
	
	<!-- 달 데이터 총 합계 -->
	<select id="One_sum_M_All" resultType="SerialDTO" parameterType="HashMap">
		SELECT ROUND((sum(IO_POWER)/1000),3) as powers, ROUND(sum(IO_USAGE),1) as usages , ROUND(((sum(IO_POWER)/1000) / ((SELECT COUNT(*)FROM(SELECT * FROM INVERTER WHERE DATE_FORMAT(IO_DATE, "%Y-%m") = DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 0 MONTH),"%Y-%m") <if test='!inverter.equals("all")'> AND IO_TYPE = #{inverter} </if> GROUP BY DATE_FORMAT(IO_DATE, "%Y-%m-%d"))A)*10))*100 , 1)  as percent
		FROM INVERTER 
		WHERE DATE_FORMAT(IO_DATE, "%Y-%m") = DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 0 MONTH),"%Y-%m")
		<if test='!inverter.equals("all")'>
			AND IO_TYPE = #{inverter} 
		</if>  
	</select>

	<!-- 전체 데이터 총 합계 -->
	<select id="One_sum_All" resultType="SerialDTO" parameterType="HashMap">
		SELECT ROUND((sum(IO_POWER)/1000),3) as powers, ROUND(sum(IO_USAGE),1) as usages ,ROUND((sum(IO_POWER) / ((SELECT COUNT(*) FROM(SELECT * FROM INVERTER WHERE 1=1 <if test='!inverter.equals("all")'> AND IO_TYPE = #{inverter} </if> GROUP BY DATE_FORMAT(IO_DATE, "%Y-%m-%d"))A)*10000))*100 , 1)  as percent
		FROM INVERTER
		WHERE 1=1 
		<if test='!inverter.equals("all")'>
			AND IO_TYPE = #{inverter} 
		</if>
	</select>
	
	
	<!-- 전 주데이터 구하기 발전량 , 소비량  -->
	<select id="EMS_PreWeek" resultType="SerialDTO" parameterType="HashMap">
		SELECT ROUND(AVG(IO_POWER),1) as powers, ROUND(AVG(IO_USAGE),1) as usages , IO_DATE , ROUND(AVG(IO_CHARGE),1) as charges,
		week(IO_DATE)+1 as week_num
		FROM INVERTER
		WHERE DATE_FORMAT(IO_DATE, "%Y-%m") = DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 0 MONTH),"%Y-%m")
		AND week(IO_DATE)+1 = (SELECT WEEK(CURDATE()))
	</select>
	
	<!-- 만약 이번주가 새해의 1번째 주라면 ? 작년 52번째 주를 찾아줘야한다 -->
	<select id="EMS_PreWeek_F" resultType="SerialDTO" parameterType="HashMap">
		SELECT ROUND(AVG(IO_POWER),1) as powers, ROUND(AVG(IO_USAGE),1) as usages , IO_DATE , ROUND(AVG(IO_CHARGE),1) as charges,
		week(IO_DATE)+1 as week_num
		FROM INVERTER
		WHERE DATE_FORMAT(IO_DATE, "%Y") = DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL -1 YEAR),"%Y")
		AND week(IO_DATE)+1 = 52
	</select>
	
	<!-- 전년 동월 발전 소비량 -->
	<select id="One_sum_PreM_All" resultType="SerialDTO" parameterType="HashMap">
		SELECT sum(IO_POWER) as powers, ROUND(sum(IO_USAGE),3) as usages 
		FROM INVERTER 
		WHERE DATE_FORMAT(IO_DATE, "%Y-%m") = DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL -1 YEAR),"%Y-%m")
	</select>
	
	<!-- 예측모델에서 소비량차트 -->
	<select id="PreModel_CharData" resultType="SerialDTO" parameterType="HashMap">
		SELECT ROUND((sum(IO_POWER)/1000),3) as powers, ROUND(sum(IO_USAGE),3) as usages, IO_DATE 
		FROM INVERTER
		WHERE 1=1 
		<if test='dayType.equals("A")'>
			AND DATE_FORMAT(IO_DATE, "%Y-%m") = DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 0 MONTH),"%Y-%m")
		</if>
		<if test='dayType.equals("B")'>
			AND DATE_FORMAT(IO_DATE, "%Y-%m") = DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL -1 MONTH),"%Y-%m")
		</if>
		<if test='dayType.equals("C")'>
			AND DATE_FORMAT(IO_DATE, "%Y-%m") = DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL -1 YEAR),"%Y-%m")
		</if>
		GROUP BY DATE_FORMAT(IO_DATE, "%Y-%m-%d")
	</select>
	
	<!-- 달 데이터 총 합계 (수익, CO2)-->
	<select id="One_sum_M_Other_All" resultType="SerialDTO" parameterType="HashMap">
		SELECT SUM(K.IO_CASH) as cashes, ROUND(SUM(K.IO_CO2), 3) as co2es 
		FROM(
			SELECT A.*
			FROM (
				SELECT DATE_FORMAT(IO_DATE, "%Y-%m-%d") AA, IO.*
				FROM INVERTER  IO
				WHERE 1=1
				<if test='!mon.equals("all")'>
					AND DATE_FORMAT(IO_DATE, "%Y-%m") = DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 0 MONTH),"%Y-%m")
				</if>
				<if test='!inverter.equals("all")'>
					AND IO_TYPE = #{inverter} 
				</if>  
				ORDER BY IO_DATE DESC
				limit 999999999999
			)A
			GROUP BY AA
		)K
	</select>
	
	<!-- 저번달 데이터 총 합계 (수익, CO2)-->
	<select id="One_sum_PreM_Other_All" resultType="SerialDTO" parameterType="HashMap">
		SELECT SUM(K.IO_CASH) as cashes, SUM(K.IO_CO2) as co2es
		FROM(
			SELECT A.*
			FROM (
				SELECT DATE_FORMAT(IO_DATE, "%Y-%m-%d") AA, IO.*
				FROM INVERTER  IO
				WHERE DATE_FORMAT(IO_DATE, "%Y-%m") = DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL -1 MONTH),"%Y-%m")
				<if test='!inverter.equals("all")'>
					AND IO_TYPE = #{inverter} 
				</if>  
				ORDER BY IO_DATE DESC
				limit 999999999999
			)A
			GROUP BY AA
		)K
	</select>
	
	
	<!-- 분전반 데이터 현재 데이터랑 하루 누적 데이터 추출 -->
	<select id="LVDC_getDATA" resultType="HashMap">
		SELECT *
		FROM DISTRIBUTION_BOARD 
		WHERE DATE_FORMAT(Date_time ,'%Y-%m-%d')  =  CURDATE()
		ORDER BY Date_time DESC
		LIMIT 1
	</select>
	
	
	
	
	<select id="PowerSum" resultType="HashMap">
		SELECT PSD_VALUE
		FROM PCS_SOLAR_DATA  
		WHERE DATE_FORMAT(PSD_DATE, "%Y-%m-%d") = DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 0 day),"%Y-%m-%d")
		ORDER BY PSD_KEYNO DESC
		LIMIT 1
	</select>
	
	
	<select id="LVDCgetData_To" resultType="SerialDTO">
		SELECT *
		FROM DISTRIBUTION_BOARD
		WHERE DATE_FORMAT(Date_time, "%Y-%m-%d") = DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 0 day),"%Y-%m-%d")
	</select>
	
	
	
	
	
</mapper>