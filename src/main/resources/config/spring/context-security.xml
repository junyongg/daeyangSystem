<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
  xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.2.xsd">
	
	<http pattern="/common/**" security="none"/>
	<http pattern="/data/**" security="none"/>
	<http pattern="/async/**" security="none"/>
	<http pattern="/error.do" security="none"/>
	<http pattern="/**/login/denied.do" security="none"/>
	
	
	
	<!-- 
	customAuthFilter 과 logoutFilter는 http 패턴마다 따로 추가해줘야된다.
	
	customAuthFilter : 로그인 처리하는 url 설정 
		<beans:constructor-arg index="0" value="/tour/j_spring_security_check.do"/>
	logoutFilter : 	로그인 페이지와 로그아웃 페이지를 설정
		<beans:constructor-arg index="0" value="/tour/user/login.do"/>
	    <beans:constructor-arg index="1" value="/tour/logout.do"/>
	 -->
	
	<http pattern="/dyAdmin/**"  use-expressions="true"  access-denied-page="/dyAdmin/login/denied.do">    
		<form-login login-page="/dyAdmin/user/login.do"/> 
		
		<anonymous granted-authority="ANONYMOUS"  />
		
		<custom-filter position="PRE_AUTH_FILTER" ref="customAuthFilter" />	
		<custom-filter position="LOGOUT_FILTER" ref="logoutFilter"/>
		<custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="filterSecurityInterceptor" />
		<custom-filter after="EXCEPTION_TRANSLATION_FILTER" ref="ajaxSessionTimeoutFilter"/>
		
		<remember-me services-ref="rememberMeServices" authentication-success-handler-ref="customAuthenticationSuccessHandler"/>

		<!-- enable csrf protection -->
		<csrf/>
	</http>
	
	<http pattern="(.*).do(\?(.*))?$" path-type="regex"  use-expressions="true"  access-denied-page="/user/login/denied.do">    
	    <form-login  login-page="/user/member/login.do" /> 
	    
	    <anonymous granted-authority="ANONYMOUS"  />
	    
	    <custom-filter position="PRE_AUTH_FILTER" ref="customAuthFilter_user" />  
	    <custom-filter position="LOGOUT_FILTER" ref="logoutFilter_user"/>
	    <custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="filterSecurityInterceptor" />
	    <custom-filter after="EXCEPTION_TRANSLATION_FILTER" ref="ajaxSessionTimeoutFilter"/>
		
		<remember-me services-ref="rememberMeServices" authentication-success-handler-ref="customAuthenticationSuccessHandler"/>
		
	    <!-- enable csrf protection -->
	    <!-- <csrf request-matcher-ref="csrfSecurityRequestMatcher" /> -->
	    <csrf/>
  	</http>
	
	<!-- 여기 로그인 정보 저장 하는 곳 -->
	<beans:bean id="rememberMeServices" class="com.tx.common.security.rememberMe.CustomTokenBasedRememberMeServices" >
	    <beans:constructor-arg index="0" value="REMEMBER-ME"/>
	    <beans:constructor-arg index="1" ref="customUserDetailsService"/>
	    <beans:property name="tokenValiditySeconds" value="864000"/>
	    <beans:property name="cookieName" value="SPRING_RM"/>
	    <beans:property name="parameter" value="_spring_security_remember_me"/>
	</beans:bean>
	
	
	<!-- <beans:bean id="csrfSecurityRequestMatcher" class="com.tx.common.security.csrf.CsrfSecurityRequestMatcher"/> -->
	
	
	<!-- http 설정마다 customAuthFilter, logoutFilter 따로 정의 해야된다. login url 과 logout url 이 다름 -->
	<beans:bean id="customAuthFilter" class="com.tx.common.security.filter.CustomUsernamePasswordAuthenticationFilter">
	    <beans:constructor-arg index="0" value="/dyAdmin/j_spring_security_check.do"/>
	    <beans:property name="authenticationManager" ref="authenticationManager" />
	    <beans:property name="authenticationSuccessHandler" ref="customAuthenticationSuccessHandler"/>
	    <beans:property name="authenticationFailureHandler" ref="customAuthenticationFailureHandler"/>
	</beans:bean>
		
	<beans:bean id="logoutFilter" class="com.tx.common.security.filter.CustomLogoutFilter">
	    <beans:constructor-arg index="0" value="/dyAdmin/user/login.do"/>
	    <beans:constructor-arg index="1" value="/dyAdmin/logout.do"/>
	    <beans:constructor-arg index="2">
	        <beans:list>
	            <beans:ref bean="CustomLogoutHandler"/>
	        </beans:list>
	    </beans:constructor-arg>
	</beans:bean>
	
   	<beans:bean id="customAuthFilter_user" class="com.tx.common.security.filter.CustomUsernamePasswordAuthenticationFilter">
	    <beans:constructor-arg index="0" value="/user/j_spring_security_check.do"/>
	    <beans:property name="authenticationManager" ref="authenticationManager" />
	    <beans:property name="authenticationSuccessHandler" ref="customAuthenticationSuccessHandler"/>
	    <beans:property name="authenticationFailureHandler" ref="customAuthenticationFailureHandler"/>
	</beans:bean>
	
	<beans:bean id="logoutFilter_user" class="com.tx.common.security.filter.CustomLogoutFilter">
	    <beans:constructor-arg index="0" value="/"/>
	    <beans:constructor-arg index="1" value="/user/logout.do"/>
	    <beans:constructor-arg index="2">
	        <beans:list>
	            <beans:ref bean="CustomLogoutHandler"/>
	        </beans:list>
	    </beans:constructor-arg>
	</beans:bean>
	
	<authentication-manager alias="authenticationManager"> 
		    <authentication-provider ref="customAuthenticationProvider"/>
	</authentication-manager>
	
	<beans:bean id="customAuthenticationProvider" class="com.tx.common.security.provider.CustomAuthenticationProvider">
        <beans:property name="usedLimitMaxSession" value="true" />	<!-- 동일 아이디 동시접속 제한 여부 default false -->
        <beans:property name="maxSessions" value="10" />	<!-- 동일 아이디 동시접속 제한 수 -->
        <beans:property name="existingSessionKill" value="true" /> <!-- true : 기존 세션 죽임, false : 현재 세션 튕김 , 기본값 true -->
	</beans:bean>
	
	
	<beans:bean id="ajaxSessionTimeoutFilter" class="com.tx.common.security.filter.AjaxSessionCheckFilter">
        <beans:property name="ajaxHeader" value="AJAX" />
	</beans:bean>
	
	<beans:bean id="securityContextLogoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
	
	<beans:bean id="CustomLogoutHandler" class="com.tx.common.security.handler.CustomLogoutHandler"/>
	
   	<beans:bean id="customAuthenticationSuccessHandler" class="com.tx.common.security.handler.CustomAuthenticationSuccessHandler">
	    <beans:property name="defaultUrl" value="/index.do" />
	</beans:bean>
   	
   	<beans:bean id="customAuthenticationFailureHandler" class="com.tx.common.security.handler.CustomAuthenticationFailureHandler">
   		<beans:property name="loginidname" value="UI_ID" />
	    <beans:property name="loginpasswdname" value="UI_PASSWORD" />
	    <beans:property name="loginredirectname" value="loginRedirect" />
	    <beans:property name="exceptionmsgname" value="securityexceptionmsg" />
	</beans:bean>
   	
	<beans:bean id="filterSecurityInterceptor" class="com.tx.common.security.filter.CustomFilterSecurityInterceptor">
	    <beans:property name="authenticationManager"  ref="authenticationManager" />
	    <beans:property name="accessDecisionManager" ref="accessDecisionManager" />
	    <beans:property name="securityMetadataSource" ref="reloadableFilterInvocationSecurityMetadataSource" />
	</beans:bean>
	 
	<beans:bean id="accessDecisionManager" class="com.tx.common.security.vote.AffirmativeBased">
	    <beans:constructor-arg>
	        <beans:list>
	            <beans:bean class="org.springframework.security.access.vote.RoleVoter">
	                <beans:property name="rolePrefix" value="" />
	            </beans:bean>
	        </beans:list>
	    </beans:constructor-arg>
	</beans:bean>
	 
	<beans:bean id="reloadableFilterInvocationSecurityMetadataSource" class="com.tx.common.security.handler.ReloadableFilterInvocationSecurityMetadataSource">
	    <beans:constructor-arg ref="requestMap" />
	    <beans:property name="securedObjectService" ref="securedObjectService" />
	</beans:bean>
	 
	<beans:bean id="securedObjectService" class="com.tx.common.security.service.impl.SecuredObjectServiceImpl"/>
	 
	<beans:bean id="customUserDetailsService" class="com.tx.common.security.service.impl.CustomUserDetailsService"/>
	
	<beans:bean id="requestMap" class="com.tx.common.security.provider.UrlResourcesMapFactoryBean" init-method="init">
	    <beans:property name="securedObjectService" ref="securedObjectService" />
	</beans:bean>
	
	<beans:bean id="filterMultipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <beans:property name="maxUploadSize" value="100000000" />
    </beans:bean>
	
	<!-- webInvocationPrivilegeEvaluator necessary to use <sec:authorized url="xx"> -->
	<beans:bean id="webInvocationPrivilegeEvaluator" class="org.springframework.security.web.access.DefaultWebInvocationPrivilegeEvaluator">
	    <beans:constructor-arg ref="filterSecurityInterceptor"/>
	</beans:bean>
	
</beans:beans>